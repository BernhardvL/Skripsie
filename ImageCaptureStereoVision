// ImageCaptureStereoVision.cpp : Defines the entry point for the console application.
//


#include "stdafx.h"
#include <vector>
#include <windows.h>
#include <iostream> // for standard I/O
#include <string>   // for strings
#include <iomanip>  // for controlling float print precision
#include <sstream>  // string to number conversion
#include <math.h>

#include <stdlib.h>
#include <opencv2/nonfree/nonfree.hpp>
#include <opencv2/legacy/compat.hpp>

#include "opencv2/imgproc/imgproc.hpp"  // Gaussian Blur
#include "opencv2/core/core.hpp"        // Basic OpenCV structures (cv::Mat, Scalar)
#include <opencv2/highgui/highgui.hpp>  // OpenCV window I/O
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/core/mat.hpp>
#include <opencv2/legacy/compat.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2\imgproc\imgproc_c.h>
#include "CLEyeMulticam.h"

#include <stdio.h>

using namespace std;
using namespace cv;

vector<double> pose;

int getCalIm = 0;		//Capture calibration Images
int calib = 0;			//Calculate calibration Parameters
int recOn = 0;			//Do rectification
int useKnownVal = 1;		//Use known values to do rectification
int captureOn = 0;		//Capture Images for SLAM

void findImagePoints(vector<KeyPoint> *kPntsIn, Mat Im, Mat *descrip);

int gain = 0;					//Choose gain for both cameras
int expo = 50;					//Choose exposure for both cameras
double zoom = 0.0;			//Choose zoom of cameras
int rot = 0;					//Choose rotation of cameras

int key;						//Key pressed

int w1,w2,h1,h2;				//Image size variables
IplImage *capIm1,*capIm2;		//Images capturing variables
//PBYTE capBuff1 = NULL;			//Image capture buffer 1
//PBYTE capBuff2 = NULL;			//Image capture buffer 2

//GUID guid1 = CLEyeGetCameraUUID(0);		//Camera 1 GUID
//GUID guid2 = CLEyeGetCameraUUID(1);		//Camera 2 GUID

//CLEyeCameraInstance camera1 = CLEyeCreateCamera(guid1,CLEYE_COLOR_PROCESSED,CLEYE_QVGA,30);
//CLEyeCameraInstance camera2 = CLEyeCreateCamera(guid2,CLEYE_COLOR_PROCESSED,CLEYE_QVGA,30);

//////////////////////////////////////
////////Calibration Parameters////////
//////////////////////////////////////

double cM1[3][3] = {557.12943, 0, 360.78845, 0, 551.60828, 238.60101, 0, 0, 1};
cv::Mat camMat1 = Mat(3,3,CV_64F,cM1);										//Camera matrix

double d1[5][1] = {-0.12077, 0.19052, 0.00817, 0.00948, 0.00000};
cv::Mat distort1 = Mat(5,1,CV_64F, d1);										//Distortion Coeficients

double cM2[3][3] = {547.69705, 0, 345.60793, 0, 541.74991, 243.44769, 0, 0, 1};
cv::Mat camMat2= Mat(3,3,CV_64F,cM2);;										//Camera matrix

double d2[5][1] = {-0.14017, 0.11013, 0.00219, 0.00187, 0.00000};
cv::Mat distort2 = Mat(5,1,CV_64F, d2);	;										//Distortion Coeficients

cv::Mat H;

int numImages = 14;

std::vector<cv::Mat> checkIm1(numImages);
std::vector<cv::Mat> checkIm2(numImages);

Mat R;
Mat Rt;
Mat T;
Mat E;
Mat F;

double r[3][1] = {-0.00881, 0.02062, 0.00727};
Mat Rk = Mat(3, 1, CV_64F, r);

double t[3][1] = {-374.65075, -1.77937, -27.96350};
Mat Tk = Mat(3, 1, CV_64F, t);

/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////

Mat in;
Mat out;
vector<KeyPoint> inKeyPoints;
Mat inDescrip;

Mat inLeft,inRight,outLeft,outRight,rectLeft, rectRight;
vector<KeyPoint> inLeftKeyPoints,inRightKeyPoints,keyLeft,keyRights;
Mat inLeftDes,inRightDes,desLeft,desRight;
int imCnt = 0;

/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////

cv::Mat R1,R2,P1,P2,Q,cam1Map1,cam1Map2,cam2Map1,cam2Map2;

std::vector<cv::Mat> recIm1(numImages);
std::vector<cv::Mat> recIm2(numImages);

std::vector<cv::Mat> undistortedIm1(numImages);
std::vector<cv::Mat> undistortedIm2(numImages);


////////////////////////////////////

std::vector<DMatch > matches, goodMatches;

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////CLEyecam Stereo Camera Sample Code//////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////

double GetRandomNormalized()
{
	return (double)(rand()-(RAND_MAX>>1))/(double)(RAND_MAX>>1);
}

// Sample camera capture class
class CLEyeCameraCapture
{
	CHAR _windowName[256];
	GUID _cameraGUID;
	CLEyeCameraInstance _cam;
	CLEyeCameraColorMode _mode;
	CLEyeCameraResolution _resolution;
	float _fps;
	HANDLE _hThread;
	bool _running;
	int _camnum;
public:
	CLEyeCameraCapture(LPSTR windowName, GUID cameraGUID, CLEyeCameraColorMode mode, CLEyeCameraResolution resolution, float fps, int camnum) :
		_cameraGUID(cameraGUID), _cam(NULL), _mode(mode), _resolution(resolution), _fps(fps), _running(false), _camnum(camnum)
	{
		//strcpy(_windowName, windowName);
	}
	bool StartCapture()
	{
		_running = true;
		cvNamedWindow(_windowName, CV_WINDOW_AUTOSIZE);
		// Start CLEye image capture thread
		_hThread = CreateThread(NULL, 0, &CLEyeCameraCapture::CaptureThread, this, 0, 0);
		if(_hThread == NULL)
		{
			//MessageBox(NULL,"Could not create capture thread","CLEyeMulticamTest", MB_ICONEXCLAMATION);
			return false;
		}
		return true;
	}
	void StopCapture()
	{
		if(!_running)	return;
		_running = false;
		WaitForSingleObject(_hThread, 1000);
		cvDestroyWindow(_windowName);
	}
	void IncrementCameraParameter(int param)
	{
		if(!_cam)	return;
		printf("CLEyeGetCameraParameter %d\n", CLEyeGetCameraParameter(_cam, (CLEyeCameraParameter)param));
		CLEyeSetCameraParameter(_cam, (CLEyeCameraParameter)param, CLEyeGetCameraParameter(_cam, (CLEyeCameraParameter)param)+10);
	}
	void DecrementCameraParameter(int param)
	{
		if(!_cam)	return;
		printf("CLEyeGetCameraParameter %d\n", CLEyeGetCameraParameter(_cam, (CLEyeCameraParameter)param));
		CLEyeSetCameraParameter(_cam, (CLEyeCameraParameter)param, CLEyeGetCameraParameter(_cam, (CLEyeCameraParameter)param)-10);
	}
	void Run()
	{
		int w, h;
		IplImage *pCapImage;
		PBYTE pCapBuffer = NULL;
		// Create camera instance
		_cam = CLEyeCreateCamera(_cameraGUID, _mode, _resolution, _fps);
		if(_cam == NULL)		return;
		// Get camera frame dimensions
		CLEyeCameraGetFrameDimensions(_cam, w, h);
		// Depending on color mode chosen, create the appropriate OpenCV image
		if(_mode == CLEYE_COLOR_PROCESSED || _mode == CLEYE_COLOR_RAW)
			pCapImage = cvCreateImage(cvSize(w, h), IPL_DEPTH_8U, 4);
		else
			pCapImage = cvCreateImage(cvSize(w, h), IPL_DEPTH_8U, 1);

		// Set some camera parameters
		CLEyeSetCameraParameter(_cam, CLEYE_GAIN, 0);
		CLEyeSetCameraParameter(_cam, CLEYE_EXPOSURE, 50);
		CLEyeSetCameraParameter(_cam, CLEYE_ZOOM, 0);
		CLEyeSetCameraParameter(_cam, CLEYE_ROTATION, 0);

		// Start capturing
		CLEyeCameraStart(_cam);
		cvGetImageRawData(pCapImage, &pCapBuffer);
		// image capturing loop
		int count = 0;
		int imcnt = 0;

		while(_running)
		{
			CLEyeCameraGetFrame(_cam, pCapBuffer);

			if(count == 150)
			{
				imcnt++;
				if(imcnt < 40)
				{
					char filename[MAX_PATH] = {0};
					sprintf_s( filename, "C:\\Users\\Bernhard\\Documents\\Skripsie\\Cam%dFrame%d.jpg",_camnum,imcnt);
					printf(filename);
					cvSaveImage(filename,pCapImage);
					count = 0;
				}else
				{
					count = 0;
					//break;
				}
			}

			cvShowImage(_windowName, pCapImage);

			count++;
		}
		// Stop camera capture
		CLEyeCameraStop(_cam);
		// Destroy camera object
		CLEyeDestroyCamera(_cam);
		// Destroy the allocated OpenCV image
		cvReleaseImage(&pCapImage);
		_cam = NULL;
	}
	static DWORD WINAPI CaptureThread(LPVOID instance)
	{
		// seed the rng with current tick count and thread id
		srand(GetTickCount() + GetCurrentThreadId());
		// forward thread to Capture function
		CLEyeCameraCapture *pThis = (CLEyeCameraCapture *)instance;
		pThis->Run();
		return 0;
	}
};



//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////End of Sample Code//////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////




int _tmain(int argc, _TCHAR* argv[])
{
	//////////////////////////////////////////////////////////////
	//////////Feaure Detection, Description and Matching//////////
	//////////////////////////////////////////////////////////////

	////////////////////////////////
	////////Feature Detector////////
	////////////////////////////////

	//////////Firts Image///////////


	cv::initModule_nonfree();
	
	while(true)
	{
		Mat imUndistLeft, imUndistRight;
		
		int matchCnt = 0;
		Mat pointCoord, tempCoord, Coordpre, Coordhom, Coord;
		vector<Point2f> points1,points2;
		Mat outIm1,outIm2;

		goodMatches.clear();
		points1.clear();
		points2.clear();

		cout << "Loading image for feature detection" << endl;

		cout << "Creating Filenames" << endl;

		char filenameCapLeft[MAX_PATH] = {0};
		sprintf_s( filenameCapLeft, "C:\\Users\\Bernhard\\Documents\\Skripsie\\Cam0StarA%d.jpg",imCnt+1);		//Set file name  and path3

		char filenameCapRight[MAX_PATH] = {0};
		sprintf_s( filenameCapRight, "C:\\Users\\Bernhard\\Documents\\Skripsie\\Cam1StarA%d.jpg",imCnt+1);		//Set file name  and path3

		//cout << "Creating Images" << endl;

		inLeft = cv::imread(filenameCapLeft,CV_LOAD_IMAGE_GRAYSCALE);
		inRight = cv::imread(filenameCapRight,CV_LOAD_IMAGE_GRAYSCALE);

		undistort(inLeft,imUndistLeft,camMat1,distort1);
		undistort(inRight,imUndistRight,camMat1,distort1);

		/*namedWindow("Undistort Left");
		imshow("Undistort Left", imUndistLeft);

		namedWindow("Undistort Right");
		imshow("Undistort Right", imUndistRight);*/


		cout << "Stereo Rectify" << endl;

		Rodrigues(Rk,R);

		cv::stereoRectify(camMat1,distort1,camMat2,distort2,inLeft.Mat::size(),R,Tk,R1,R2,P1,P2,Q,0);

		cout << "Rectification Map" << endl;

		cv::initUndistortRectifyMap(camMat1, distort1, R1, P1, inLeft.Mat::size(), CV_32FC1, cam1Map1, cam1Map2);
		cv::initUndistortRectifyMap(camMat2, distort2, R2, P2, inRight.Mat::size(), CV_32FC1, cam2Map1, cam2Map2);

		cout << "Remap Images" << endl;

		cv::remap(inLeft,rectLeft,cam1Map1,cam1Map2,cv::INTER_AREA);
		cv::remap(inRight,rectRight,cam2Map1,cam2Map2,cv::INTER_AREA);

		
		//inLeft.copyTo(rectLeft);
		//inRight.copyTo(rectRight);
		
		
		cout << "Find key points" << endl;

		Ptr<FeatureDetector> siftFDLeft = FeatureDetector::create("FAST");
		siftFDLeft->detect(rectLeft,inLeftKeyPoints);
		Ptr<DescriptorExtractor> siftDELeft = DescriptorExtractor::create("SIFT");
		siftDELeft->compute(rectLeft,inLeftKeyPoints,inLeftDes);

		Ptr<FeatureDetector> siftFDRight = FeatureDetector::create("FAST");
		siftFDRight->detect(rectRight,inRightKeyPoints);
		Ptr<DescriptorExtractor> siftDERight = DescriptorExtractor::create("SIFT");
		siftDERight->compute(rectRight,inRightKeyPoints,inRightDes);
		
		BFMatcher matcher(NORM_L2,false);
		matcher.match(inLeftDes,inRightDes,matches);

		vector<Point2f> leftmt;
		vector<Point2f> rightmt;

		for(int mt = 0;mt < matches.size();mt++)
		{
			leftmt.push_back(inLeftKeyPoints[matches[mt].queryIdx].pt);
			rightmt.push_back(inRightKeyPoints[matches[mt].trainIdx].pt);

			if(((inLeftKeyPoints[matches[mt].queryIdx].pt.y - inRightKeyPoints[matches[mt].trainIdx].pt.y) < 5) && ((inLeftKeyPoints[matches[mt].queryIdx].pt.y - inRightKeyPoints[matches[mt].trainIdx].pt.y) > -5))
			{
				goodMatches.push_back(matches[mt]);

				points1.push_back(inLeftKeyPoints[matches[mt].queryIdx].pt);
				points2.push_back(inRightKeyPoints[matches[mt].trainIdx].pt);
			}
		}

				

		/*for (int i = 0; i < min(inLeftDes.rows-1,(int) matches.size()); i++) 
		{
			if(matches[i,0].distance < (0.8*(matches[i,1].distance)))
			{
				goodMatches.push_back(matches[i]);
			}
		}*/

		//matcher.knnMatch(inLeft, inRight, match, 2);

		/*for(int lt = 0;lt < inLeftKeyPoints.size();lt++)
		{
			for(int rt = 0;rt < inRightKeyPoints.size();rt++)
			{
				if(inLeftKeyPoints[lt].pt.y == inRightKeyPoints[rt].pt.y||inLeftKeyPoints[lt].pt.y == (inRightKeyPoints[rt].pt.y + 1)||inLeftKeyPoints[lt].pt.y == (inRightKeyPoints[rt].pt.y - 1)||inLeftKeyPoints[lt].pt.y == (inRightKeyPoints[rt].pt.y + 2)||inLeftKeyPoints[lt].pt.y == (inRightKeyPoints[rt].pt.y - 3))
				{					
					//FlannBasedMatcher matcher;

					//std::vector<vector<DMatch >> match;

					BFMatcher matcher(NORM_L2,false);

					cout << "Matching" << endl;

					matcher.match(inLeftDes.row(lt),inRightDes.row(rt),match);
					
					//matcher.knnMatch(inLeft.row(lt), inRight.row(rt), match, 2);

					if(match.size()>0)
					{
						matchCnt ++;

						cout << "Push Back: Key Points" << endl;

						keyLeft.push_back(inLeftKeyPoints[lt]);
						keyRight.push_back(inRightKeyPoints[rt]);

						cout << "Push Back: Key Point Coordinate" << endl;

						points1.push_back(inLeftKeyPoints[lt].pt);
						points2.push_back(inRightKeyPoints[rt].pt);

						cout << "Push Back: Descriptors" << endl;

						//desLeft.row(matchCnt) = inLeftDes.row(lt);
						//desRight.row(matchCnt) = inRightDes.row(rt);
						
						cout << "Push Back: Match" << endl;

						matches.push_back(match[0]);
					}
				}
			}
		}*/

		//cout << "Matches: " << matches.size() << endl;
		//cout << "Good Matches: " << goodMatches.size() << endl;

		//cout << "Draw" << endl;

		drawMatches(rectLeft,inLeftKeyPoints,rectRight,inRightKeyPoints,matches,outIm1,Scalar(0,255,0),Scalar(0,0,255));
		drawMatches(rectLeft,inLeftKeyPoints,rectRight,inRightKeyPoints,goodMatches,outIm2,Scalar(0,255,0),Scalar(0,0,255));

		//cout << "Create Windows" << endl;

		namedWindow("Matches");
		imshow("Matches", outIm1);

		namedWindow("Good Matches");
		imshow("Good Matches", outIm2);

		cout << "Triangulate" << endl;

		triangulatePoints(P1,P2,points1,points2,Coordhom);

		cout << "Convert from Homogeneous" << endl;
		
		int cols = Coordhom.cols;
		int rows = Coordhom.rows;

		cout << "Rows: " << rows << " / Cols: " << cols << endl;

		vector<vector<double>> Coordnew;
		vector<vector<double>> Coord3;
		vector<double> cdn;
		vector<double> cd3;		

		for(int i = 0;i < rows; i++)
		{
			for(int j = 0; j < cols; j++)
			{
				cout << "push_back's i: " << i << " / j: " << j << endl;

				cd3.push_back(0.0);
				cdn.push_back(0.0);
			}

			if(i < (rows - 1))
			{
				Coord3.push_back(cd3);
			}
			Coordnew.push_back(cdn);

			cd3.clear();
			cdn.clear();
		}

		cout << "Size at 0: " << Coordnew[0].size() << endl;
		cout << "Size at 1: " << Coordnew[1].size() << endl;
		cout << "Size at 2: " << Coordnew[2].size() << endl;
		cout << "Size at 3: " << Coordnew[3].size() << endl;
		cout << "Size: " << Coordnew.size() << endl;

		cout << "Size at 0: " << Coord3[0].size() << endl;
		cout << "Size at 1: " << Coord3[1].size() << endl;
		cout << "Size at 2: " << Coord3[2].size() << endl;
		cout << "Size: " << Coord3.size() << endl;

		for(int i = 0; i < rows; i++) 
		{
			//cout << "Create Mi at " << i << endl;

			double* Mi = Coordhom.ptr<double>(i); 

			for(int j = 0; j < cols; j++)
			{
				//cout << "Coordnew at [" << i << "][" << j << "]" << endl;

				Coordnew[i][j] = Mi[j];
			}

			cout << "Finished with row " << i << endl;
		}

		cout << "Finished creating vector" << endl;

		for(int kz = 0;kz < cols;kz++)
		{
			cout << "Convert" << endl;

			Coord3[0][kz] = ((Coordnew[0][kz]) / (Coordnew[3][kz]))*(0.46);
			Coord3[1][kz] = ((Coordnew[1][kz]) / (Coordnew[3][kz]))*(0.46);
			Coord3[2][kz] = ((Coordnew[2][kz]) / (Coordnew[3][kz]))*(0.46);
		}

		//convertPointsFromHomogeneous(Coordnew,Coord3);

		cout << "Save Triangulated Points" << endl;

		char pointsfile[MAX_PATH] = {0};
		sprintf_s( pointsfile, "pointsA%d.yml",imCnt+1);		//Set file name  and path3
		FileStorage fsPoints(pointsfile, FileStorage::WRITE);
		fsPoints.open(pointsfile, FileStorage::WRITE);
		if (fsPoints.isOpened())
		{
			fsPoints << "Points1" << points1;
			fsPoints << "Points2" << points2;
			fsPoints << "Q" << Q;
			fsPoints << "P1" << P1;
			fsPoints << "P2" << P2;
			for(int q = 0; q < Coord3[0].size();q++)
			{
				fsPoints << "Point" << q;
				fsPoints << "Coordinate xh" << Coordnew[0][q];
				fsPoints << "Coordinate yh" << Coordnew[1][q];
				fsPoints << "Coordinate zh" << Coordnew[2][q];
				fsPoints << "Coordinate wh" << Coordnew[3][q];

				fsPoints << "Coordinate x" << Coord3[0][q];
				fsPoints << "Coordinate y" << Coord3[1][q];
				fsPoints << "Coordinate z" << Coord3[2][q];
			}
			fsPoints.release();
		}

		
		imCnt++;

		if(imCnt == 1)
		{
			break;
		}
	}

	cout << "Finished feature detection" << endl;
	

	while((key = cvWaitKey(0)) != 0x1b);

	return 0;
}

